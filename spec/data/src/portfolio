Portfolio
술담아 2022.09 ~ 2023.02
술담아는 술담화와 같은 술 구독 서비스의 백엔드 API 구현 프로젝트입니다. 단순히 서비스를 클론하기보다는 어떤 기술을 사용할지 고민하고, 좋다고 생각하는 문화를 도입해 경험하고자 했습니다.
프로젝트 저장소        https://github.com/rogarithm/sool-dam-a/
프로젝트 위키            https://github.com/f-lab-edu/sool-dam-a/wiki
 사용한 기술 Java 17, Spring Boot 2.7.4, Gradle, MySQL, MyBatis, Redis, Git, Naver Cloud, Github Actions

담당 기능 인증, 인가 기능 구현
DB 설계 RESTful API 구현 CI/CD 구축 로드 밸런서와 세션 저장소 도입 테스트 코드 작성

Trouble Shooting
1. Redis를 이용한 세션 불일치 현상 해결
스케일 아웃 도입 후, 세션 정보가 필요한 요청일 때 세션 불일치가 발생하는 문제가 생겼습니다.
세션 불일치 해결 방안을 조사하고, 예상되는 문제점을 고려해 비교 후 세션 저장소를 도입해 문제를 해결했습니다.
서비스 이용자가 늘어날 경우 인프라를 확장하면서 발생할 수 있는 문제 상황을 경험하고, 이를 해결하기 위해 프로젝트의 특성을 고려해 선택지를 비교하는 경험을 할 수 있었습니다.
2. 인터셉터로 반복되는 인증 체크 로직의 중복을 제거
인증이 필요한 서비스마다 동일한 인증 로직이 중복되어 서비스 클래스에 도메인과 관련 없는 로직이 추가되고, 인증 관련 변경 시 유지보수가 번거로워지는 문제가 생겼습니다.
인증 로직을 인터셉터로 분리해 문제를 해결했습니다.
도메인과 관련 없는 로직으로 인해 생겼던 중복을 제거하고, 유지보수 효율성을 높일 수 있었습니다.
3. CD 환경 구축으로 번거로운 배포 작업을 자동화
배포 작업을 자주 했고, 수작업이어서 배포 시간이 오래 걸렸습니다. 더불어 스케일 아웃 도입으로 배포 시간과 관리할 민감 정보가 늘어나 작업 빈도와 시간 모두 더 증가하는 문제가 생겼습니다.
수작업 과정을 문서화해 작업 단계 분석하고, 사용할 기술 및 배포 발동 조건을 정한 후 깃헙액션으로 배포 자동화를 구현해 문제를 해결했습니다.
수동 작업과 스케일 아웃으로 인해 늘어났던 작업 시간이 줄고, 실수 가능성을 제거할 수 있었습니다. 또한 빈도에 상관 없이 배포할 수 있게 되어 배포 환경 테스트 및 다른 팀원과의 작업 내용 공유가 용이해졌습니다.


























